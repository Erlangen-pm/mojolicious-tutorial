=encoding utf8

=head1 Was ist Perl

Perl ist eine interpretierte Programmiersprache, welche viele verschiedene 
gängige Programmierparadigmen unterstützt. Perl kann für alle denkbaren
Anwendungsbereiche eingesetzt werden und bietet bereits für sehr viele
Anwendungsbereiche durch seine modulare Erweiterbarkeit fertige Softwarepakete,
welche über das zentrale Softwarearchiv CPAN einfach bezogen werden können.

Perl wurde im Rahmen der Systemadministration durch den Linguisten und
Computeradministrator Larry Wall entwickelt. Am 18.12.1987 veröffentlichte
Larry Wall die Version 1.0 seiner Programmiersprache, die ihm bei administrativen
Aufgaben unterstützen sollte. Vorrangig ging es darum, die Unterschiede der
Shellinterpreter auf verschiedenen Systemen durch eine einheitliche Umgebung
auszugleichen und die administrative Programmierung dadurch einfacher und
abwägbarer zu machen.

Ab 1994 gibt es die Hauptversion 5 von Perl, welche alle modernen Konzepte
in Perl enthält und auf dem das große Spektrum der Perl-Anwendungen aufbaut.
1995 entstand das CPAN, welches das Herzstück der Mächtigkeit von Perl bis
heute bildet.

Perl ist sehr streng was die Rückwärtskompatibilität angeht. So können zum Teil
immer noch in Perl Version 4 geschriebene Programme mit einem aktuellen
Interpreter ausgeführt werden. Durch diese Rückwärtskompatibilität sind aber
auch viele Altlasten in Perl hineingekommen, die heutzutage zum Teil überholt
anmuten. Um mit diesen Altlasten aufzuräumen und damit mit der Rückwärtskompatibilität
zu brechen wurden ab 2000 ernsthaft an der Entwicklung des Nachfolgers Perl 6
gearbeitet. Hierbei handelt es sich um eine komplette Neuentwicklung der
Programmiersprache Perl mit einigen neuen Konzepten, die so bisher in keiner
Programmiersprache vorhanden waren. Diese Entwicklung dauert bis heute an
und im produktiven Umfeld führt Perl 6 immer noch ein Nieschendasein.

Dafür erfreut sich Perl 5 weiterhin einer steigenden Beliebtheit und die Entwicklung
von Perl 6 beeinflußt an vielen Stellen die Entwicklung von Perl 5 mit. In diesem
Sinne kann man auf die von Perl-Skeptikern gern gestellte eher polemisch gehaltene
Frage: "Wann kommt denn nun eigentlich Perl 6?" durchaus leichtfertig antworten:
"Perl 6 ist bereits da, es steckt in den unzähligen Weiterentwicklungen von Perl 5
und ist fester Bestandteil der modernen Perl-Kultur.

Mojolicious, das Framework in dem es im vorliegenden Tutorial gehen soll,
verwendet ebenfalls Perl 5. Es läuft mit der Version 5.10.1 oder höher, die bereits
seit sieben Jahren existiert. Die aktuelle Version von Perl ist 5.16.1 und es
ist entschieden zu empfehlen, diese Version zu verwenden und deren Features auch
auszunutzen.

=head1 Wichtige Konzepte in Perl

Im folgenden sollen ansatzweise grundlegende Konzepte von Perl überblickshalber 
vorgestellt werden. Diese Liste ist keinesfalls vollständig und kann auch nicht
als Lehrmaterial für die Programmiersprache Perl gesehen werden. Es soll lediglich
als Zusammenfassung dienen, um eine einheitliche Terminologie für das Tutorial
festzulegen und um eine Referenz während des Tutorials zur Hand zu geben, auf deren
Grundlage man sich weiterführend informieren kann.

=head2 Dynamische Typisierung

Perl ist dynamisch typisiert. Variablen können beliebige Werte annehmen und Perl
kümmert sich intern automatisch um das passende Type-Casting.

Was dem Programmierer die Arbeit erleichtert, um schneller mit variablen Daten
arbeiten zu können, bereitet auf der anderen Seite zusätzlichen Aufwand, wenn
es darum geht, bestimmte Datentypen zu forcieren. So ist es in der Webentwicklung
unumgänglich, Benutzereingaben selbstständig gründlich zu prüfen, bevor sie 
weitergereicht werden, was man bei der Webentwicklung immer im Hinterkopf behalten
sollte.

Perl muss intern aber durchaus ein Wissen um die verschiedenen Datentypen haben,
um die automatischen Typumwandlungen effizient und sinnvoll durchführen zu können.
Für einen Perl-Programmierer lohnt es sich aber durchaus, diese Datentypen 
ebenfalls zu kennen und einen Einblick zu haben in die Art, wie Perl diese 
Datentypen verwaltet. Deswegen seien die Grunddatentypen im Folgenden kurz
aufgeführt.

=head2 Numerische Werte

=head2 Zeichenketten

=head2 Boolsche Werte

=head2 Dateihandles

=head2 Codereferenzen

=head2 Scalare, Listen, Hashes - Einzahl oder Mehrzahl

=head2 Variablen

SV-Einträge

=head2 Kontext

=head2 Namensräume

=head2 Stringbehandlung

=head2 Reguläre Ausdrücke

    m//xmsi;
    s///gxmsi;

=head2 C<$_> - It und Freunde

C<$1>-C<$9>, C<@ARGV>, C<@_>

C<STDIN>, C<STDOUT>, C<STDERR>

=head3 Und noch mehr magische Variablen

C<$">, C<$/>, C<$\>, C<$0>, C<$.>

=head2 Blöcke

=head2 Kontrollstrukturen

=head2 Subroutinen

=head2 Scoping

=head2 Objektorientierung

=head3 Einfach: blessed References

=head3 Modern: Moose, Moo, Mo, Mouse

=head2 Funktionale Programmierung

=head3 map, grep, sort, Listenkontexte

=head3 Subroutinen wie Daten behandeln/anonyme Subroutinen

=head2 Perl-Kommandozeilenreferenz - praktische Kurzfassung

=head3 -e

Der Parameter, der nach C<-e> kommt ist Perl-Code und wird ausgeführt.

=head3 -E

Wie C<-e>, nur mit Features freigeschalten (Features, die ab Perl Version 
5.10 verfügbar sind und unter Umständen mit der Rückwärtskompatibilität 
brechen).

=head3 -n, -p

Wird in Zusammenhang mit C<-e> und C<-E> verwendet.

Nimmt ähnlich wie C<sed> oder C<awk> Dateiinhalte Zeilenweise entgegen und legt
jede Zeile in Perls "it" (C<$_>) ab. Dateiinhalte werden hierbei als letztes 
Argument in Form des zugehörigen Dateinamens oder über die Standardeingabe 
angenommen.

Folgende Schleife kann man sich dabei vorstellen:

     LINE:
     while (<>) {
         say; # hier kann man etwas mit $_ anstellen
     }

Ähnlich wie in C<awk> ist es auch hier möglich, C<BEGIN { }>- und C<END { }>-
Blöcke im C<-e>/C<-E>-Parameter zu verwenden, in denen Vor- oder 
Nachbereitungsaufgaben der zeilenweisen Abarbeitung durchgeführt werden können.

C<-p> gibt zusätzlich am Ende der Datei den letztgesetzten Inhalt von C<$_> aus.

=head3 -l

Damit kann man die Automatische Zeilenendebehandlung einschalten. D.h. den eingelesenen
Zeilen bei C<-n> und C<-p> wird automatisch der Zeilenumbruch abgeschnitten.

=head3 -a

Splittet eine Zeile bei C<-n> oder C<-p> automatisch an Leerzeichenähnlichen Zeichen 
auf und packt die Teile in das vorbereitete C<@F>.

Leerzeichenähnlich heißt hier im Regelfall Leerzeichen und Tabulator.

C<-F>:

Mit C<-F> kann man bei Verwendung von C<-a> ein Zeichen angeben, an welchem
eine Zeile aufgespalten wird. Das entsprechende Zeichen muss C<-F> als Parameter
mitgegeben werden.

=head3 -M

Das dem C<-M> als Parameter mitgegebene Modul laden (L<perlfunc/"use Module">).
Für mehrere zu ladende Module kann C<-M> mehrmals angegeben werden.

=head3 -I

Gibt als Parameter einen zusätzlichen Pfad an, in dem Perl nach Modulen sucht.
Für mehrere Pfade kann C<-I> mehrmals verwendet werden.

=head3 -c

Prüft lediglich die Syntax eines Perl-Scriptes.

=head3 -w

Schaltet Warnungen ein, die den Programmierer mit zusätzlichen Meldungen
vor Fehlern bewahren sollen.

=head3 -T

Schaltet den Taint-Modus ein. Hier werden alle Daten, die von außerhalb des
Programmes kommen als gefleckt markiert und dürfen erst weiter verwendet werden
(für SQL-Statements oder Ausgaben), wenn sie zunächst gereinigt werden (i.d.R.
in dem man die Daten gegen eine RegEx prüft und daraus dann die eigentlichen
Nutzdaten zieht).

=head3 -d

Schaltet den Debugger zu. Beispielsweise kann man mit C<-d:DNYTProf> den 
Profiler L<Devel::NYTProf> verwenden, um das Programm zu profilen.

C<-de 0>:

Geht direkt in den Debugmodus ohne vorher Code auszuführen. Das ist das Perl-
Äquivalent einer Interaktiven Shellumgebung (sowas wie C<irb> in Ruby oder
ansatzweise der REPL in LISP).

=head1 Weiterführende Informationen

=over 1

=item L<http://perl.org>: Perl-Webseite

=item L<http://perldoc.perl.org>: Core-Dokumentation zu Perl

=item L<http://perldoc.perl.org/perltoc>: Core-Dokumentation zu Perl - Wo steht was

=item L<https://metacpan.org>: Suchdienst für Perl-Module und deren Dokumentation

=item L<http://www.perl-community.de>: Deutschsprachiges Perl-Forum

=item L<http://wiki.perl-community.de/>: Deutschsprachiges Wiki zum Thema Perl

=item L<http://ironman.enlightenedperl.org/>: Blogaggregator zum Thema Perl

=back

=head1 Verbreitete Technologien in Perl außerhalb der Webentwicklung

=head1 CPAN

=head1 DBI

=head1 DBIx::Class - ORM in Perl

