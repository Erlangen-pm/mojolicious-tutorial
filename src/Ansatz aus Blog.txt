Einstieg in das Mojolicious - Webframework
04.09.2012
Perl,Perl5,Mojolicious,Webdev
Für jede verbreitetere Programmiersprache gibt es mittlerweile ein Framework, um einfach und mit modernen Technologien Webseiten zu erstellen. In Perl heißt eines von den bekannteren Frameworks Mojolicious. In der Vergangenheit habe ich Mojolicious oft für kleine und große Projekte verwendet und möchte im Folgenden ein wenig von meinen Erfahrungen mit Mojolicious dokumentieren.

Mojolicious ist ein Framework, welches sich an Catalyst orientiert, welches wiederum Ideen von Ruby-On-Rails aufgreift. Neben diesem Ansatz hat Mojolicious allerdings auch einen "Modus" der Frameworks wie Sinatra entlehnt ist. Dieser einfachere Modus nennt sich "Mojolicious::Lite". Mojolicious und Mojolicious::Lite schließen sich allerdings nicht aus. Ein Projekt, welches man als "Proof of Concept" in Mojolicious::Lite schnell zusammen hackt, kann man mit internen Werkzeugen schnell und einfach In eine Mojolicious-Anwendung für bessere Wartbarkeit und Erweiterbarkeit überführen. Damit deckt Mojolicious einen breiten Anwendungsbereich ab. Witzig ist, dass man in einer Mojolicious::Lite-Anwendung in der einen Datei Base64-Kodiert sogar Bilder ablegen kann. Damit ist in dieser einen Datei alles enthalten, was die Anwendung braucht und man kann diese Anwendung ganz einfach überall hin ausliefern, wo man möchte - einfach die Datei kopieren und gut.

Technisch ist Mojolicious komplett in Perl geschrieben und lässt sich ohne weitere Abhängigkeiten mit einem Standard-Perl-5 ab Version 5.10.1 betreiben. Lediglich für SSL benötigt man zusätzlich IO::Socket::SSL. Mojolicious arbeitet problemlos mit CGI, FCGI, mod_perl und Plack/PSGI zusammen. Es bringt eine eigene Templateengine mit, welche mit inline-Perl-Code arbeitet. Weiterhin enthält Mojolicious einen Entwicklungsserver (morbo) und einen Server, der für produktiven Einsatz (reverse proxy) entwickelt wurde und sich "Hypnotoad" nennt. Mojolicious bietet verschlüsseltes Sessionhandling an und enthält darüber hinaus einen JSON-Parser und -Generator und einen HTML-Parser, der mit CSS3-Selectoren arbeitet. Letzterer ist besonders wichtig für das integrierte Test-Framework, welches das automatisierte Testen von Webseiten erheblich vereinfacht. Als Goody kann man diese Hilfsfunktionen auch separat für Webscraping-Geschichten verwenden. Mittels des Modules "ojo" (<code>perl -Mojo -e ...</code> - get it?) oder mit dem Kommando "mojo" kann man diese Fähigkeiten auch ganz einfach von der Kommandozeile in einer Art Wrapper verwenden. Die entsprechende Dokumentation weiß mehr dazu.

Der große Nachteil von Mojolicious ist auch gleichzeitig sein größter Vorteil. Mojolicious macht dem Entwickler so gut wie keine Vorgaben darüber, wie er sein Programm zu strukturieren hat und wie er bestimmte Probleme löst. Mojolicious ist auch flexibel genug, um es dem Entwickler für spezielle Anwendungsfälle zu erlauben, Erweiterungen für das Framework über Plugins zu entwickeln. Der Fakt, dass eben Mojolicious aber dem Entwickler nichts vorgibt, macht es allerdings Einsteigern sehr schwer, sich in das System einzufinden. Wo andere Frameworks schon mal bestimmte Dinge, wie zum Beispiel Verzeichnisstrukturen, vorgeben, muss hier über alles selbst entschieden werden. Meist kann man die gängigen Wege von anderen Frameworks ableiten oder den Empfehlungen der Dokumentation folgen, vorgeben, muss hier über alles selbst entschieden werden. Meist kann man die gängigen Wege von anderen Frameworks ableiten oder den Empfehlungen der Dokumentation folgen. Gerade wenn man mit Mojolicious anfängt, fühlt man sich da aber leider gelegentlich etwas allein gelassen und viele Entscheidungen über Projektstruktur und Vorgehensweise muss man selber ins Blaue hinein treffen. Man muss im Vorfeld also erst einmal selber Erfahrungen mit Mojolicious sammeln, um diese Entscheidungen sinnvoll treffen zu können, was in unserer schnelllebigen Zeit ja immer nicht so gern gesehen wird. Aber gerade im Webumfeld sollte man sich die Zeit nehmen, um das Framework wirklich kennen zu lernen und damit sichere Webanwendungen zu entwickeln. Dafür belohnt einen das Framework eben dann auch mit dieser Freiheit, die einen viele komplexere Probleme auf einer ganz anderen Ebene angehen lässt.

<h3>Ein Mojolicious-Projekt starten</h3>

Um ein Projekt mit Mojolicious zu starten, installiert man sich natürlich zu erst Mojolicious - am besten in der aktuellen Version direkt aus CPAN. Anschließend kann man mit <code>mojo generate app 'ProgrammName'</code> ein neues Projekt in einem Unterverzeichnis anlegen. Das Programm selber heißt im Beispiel 'ProgrammName', das Unterverzeichnis heißt 'programm_name'. Das ist bedingt durch einige Namenskonventionen von Mojolicious, die aber im Zweifelsfall beim Aufruf des Kommandos erklärt werden. Programm-Namen sollten in Mojolicious immer in Camel-Case vergeben werden.

Im Unterverzeichnis werden dann alle notwendigen Verzeichnisse (lib, t, log, script, public, templates) und einige Beispielhafte Dateien angelegt, die entsprechend der Projektbezeichnung gefüllt sind. Diese ersten Dateien stellen das Grundgerüst der Mojolicious-Anwendung dar und sind mehr oder weniger eine Art "Hello-World", was mittels <code>morbo script/programm_name</code> bereits unter Port 3000 mit dem Webbrowser getestet werden kann.

<h3>Programm- und Ordnerstruktur</h3>

<h4>lib</h4>
<h4>log</h4>
<h4>public</h4>
<h4>script</h4>
<h4>t</h4>
<h4>templates</h4>

